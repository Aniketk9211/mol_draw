{"version":3,"file":"commands.min.js","sources":["../src/commands.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Commands helper for the Moodle tiny_moldraw plugin.\n *\n * @module      tiny_moldraw/commands\n * @copyright   2024 Venkatesan Rangarajan <venkatesanrpu@gmail.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport { getButtonImage } from \"editor_tiny/utils\";\nimport { get_string as getString } from \"core/str\";\nimport Templates from \"core/templates\";\nimport Modal from \"core/modal\";\nimport Config from \"core/config\";\nimport {\n  component,\n  startMolDrawButtonName,\n  startMolDrawMenuItemName,\n  icon,\n} from \"./common\";\n\n/**\n * Handle the action for your plugin.\n * @param {TinyMCE.editor} editor The tinyMCE editor instance.\n */\n\nconst handleAction = async (editor) => {\n  await Modal.create({\n    title: await getString(\"sketchtitle\", \"tiny_moldraw\"),\n    body: `\n        ${await Templates.render(\"tiny_moldraw/moldraw_iframe\", {\n          src: `${Config.wwwroot}/lib/editor/tiny/plugins/moldraw/chem/chem.html`,\n        })}`,\n    show: true,\n    removeOnClose: true,\n  });\n\n  var screenHeight = window.innerHeight;\n  var modalWidth = 850;\n  var modalHeight = 600;\n  let topPosition = (screenHeight - modalHeight) / 2;\n\n  // Apply CSS styles to the modal elements\n  document.querySelector(\n    \".modal-dialog\"\n  ).style.cssText = `max-width: unset; width: ${modalWidth}px; height: ${modalHeight}px; margin: ${topPosition}px auto; padding: 0;`;\n  document.querySelector(\".modal-content\").style.cssText =\n    \"max-height: 600px; height: 100vh;\";\n  document.querySelector(\".modal-body\").style.cssText = \"padding: 0;\";\n  window.console.log(editor);\n};\n\n/**\n * Get the setup function for the buttons.\n *\n * This is performed in an async function which ultimately returns the registration function as the\n * Tiny.AddOnManager.Add() function does not support async functions.\n *\n * @returns {function} The registration function to call within the Plugin.add function.\n */\nexport const getSetup = async () => {\n  const [\n    startMolDrawButtonNameTitle,\n    startMolDrawMenuItemNameTitle,\n    buttonImage,\n  ] = await Promise.all([\n    getString(\"button_startMolDraw\", component),\n    getString(\"menuitem_startMolDraw\", component),\n    getButtonImage(\"icon\", component),\n  ]);\n\n  return (editor) => {\n    // Register the Moodle SVG as an icon suitable for use as a TinyMCE toolbar button.\n    editor.ui.registry.addIcon(icon, buttonImage.html);\n\n    // Register the startMolDraw Toolbar Button.\n    editor.ui.registry.addButton(startMolDrawButtonName, {\n      icon,\n      tooltip: startMolDrawButtonNameTitle,\n      onAction: () => handleAction(editor),\n    });\n\n    // Add the startMolDraw Menu Item.\n    editor.ui.registry.addMenuItem(startMolDrawMenuItemName, {\n      icon,\n      text: startMolDrawMenuItemNameTitle,\n      onAction: () => handleAction(editor),\n    });\n    // Add toggle button\n    // editor.ui.registry.addToggleButton(\"chemDoodleToggle\", {\n    //   icon,\n    //   tooltip: \"Toggle ChemDoodle\",\n    //   onAction: () => {\n    //     handleAction(editor);\n    //     // const imageUrl = editor.getContent({format: 'text'}); // Simplified example, adjust accordingly\n    //     // openChemDoodleWithImage(editor, imageUrl);\n    //   },\n    //   onSetup: (api) => {\n    //     const handler = () => {\n    //       api.setActive(!api.isActive());\n    //     };\n    //     editor.on(\"NodeChange\", handler);\n    //     return () => editor.off(\"NodeChange\", handler);\n    //   },\n    // });\n\n    editor.ui.registry.addToggleButton(\"buttonName\", {\n      icon,\n      tooltip: \"buttonNameTitle\",\n\n      onAction: () => handleAction(editor),\n\n      onSetup: (api) => {\n        return editor.selection.selectorChangedWithUnbind(\n          \"img:not([data-mce-object]):not([data-mce-placeholder]),figure.image\",\n          function () {\n            var node = editor.selection.getNode();\n            var parentNode = node.parentNode;\n            const html = editor.serializer.serialize(parentNode);\n            const commentMatch = html.match(/<!--(.*?)-->/);\n            if (commentMatch) {\n              try {\n                var chemDoodleJson = JSON.parse(commentMatch[1]);\n                // If the comment contains valid JSON, call api.setActive and store the JSON\n                api.setActive(true);\n                window.chemDoodleJson = JSON.stringify(chemDoodleJson); // Save the JSON to window.json\n              } catch (e) {\n                // If the comment does not contain valid JSON, call api.setActive with false\n                api.setActive(false);\n              }\n            } else {\n              api.setActive(false);\n            }\n          }\n        ).unbind;\n      },\n    });\n  };\n};\n"],"names":["handleAction","async","Modal","create","title","body","Templates","render","src","Config","wwwroot","show","removeOnClose","topPosition","window","innerHeight","document","querySelector","style","cssText","console","log","editor","startMolDrawButtonNameTitle","startMolDrawMenuItemNameTitle","buttonImage","Promise","all","component","ui","registry","addIcon","icon","html","addButton","startMolDrawButtonName","tooltip","onAction","addMenuItem","startMolDrawMenuItemName","text","addToggleButton","onSetup","api","selection","selectorChangedWithUnbind","parentNode","getNode","commentMatch","serializer","serialize","match","chemDoodleJson","JSON","parse","setActive","stringify","e","unbind"],"mappings":";;;;;;;wNAwCMA,aAAeC,MAAAA,eACbC,eAAMC,OAAO,CACjBC,YAAa,mBAAU,cAAe,gBACtCC,KAAO,mBACKC,mBAAUC,OAAO,8BAA+B,CACtDC,IAAM,GAAEC,gBAAOC,6DAErBC,MAAM,EACNC,eAAe,QAMbC,aAHeC,OAAOC,YAER,KAC+B,EAGjDC,SAASC,cACP,iBACAC,MAAMC,QAAW,0DAA8EN,kCACjGG,SAASC,cAAc,kBAAkBC,MAAMC,QAC7C,oCACFH,SAASC,cAAc,eAAeC,MAAMC,QAAU,cACtDL,OAAOM,QAAQC,IAAIC,2BAWGrB,gBAEpBsB,4BACAC,8BACAC,mBACQC,QAAQC,IAAI,EACpB,mBAAU,sBAAuBC,oBACjC,mBAAU,wBAAyBA,oBACnC,yBAAe,OAAQA,4BAGjBN,SAENA,OAAOO,GAAGC,SAASC,QAAQC,aAAMP,YAAYQ,MAG7CX,OAAOO,GAAGC,SAASI,UAAUC,+BAAwB,CACnDH,KAAAA,aACAI,QAASb,4BACTc,SAAU,IAAMrC,aAAasB,UAI/BA,OAAOO,GAAGC,SAASQ,YAAYC,iCAA0B,CACvDP,KAAAA,aACAQ,KAAMhB,8BACNa,SAAU,IAAMrC,aAAasB,UAoB/BA,OAAOO,GAAGC,SAASW,gBAAgB,aAAc,CAC/CT,KAAAA,aACAI,QAAS,kBAETC,SAAU,IAAMrC,aAAasB,QAE7BoB,QAAUC,KACDrB,OAAOsB,UAAUC,0BACtB,uEACA,eAEMC,WADOxB,OAAOsB,UAAUG,UACND,iBAEhBE,aADO1B,OAAO2B,WAAWC,UAAUJ,YACfK,MAAM,mBAC5BH,qBAEII,eAAiBC,KAAKC,MAAMN,aAAa,IAE7CL,IAAIY,WAAU,GACdzC,OAAOsC,eAAiBC,KAAKG,UAAUJ,gBACvC,MAAOK,GAEPd,IAAIY,WAAU,QAGhBZ,IAAIY,WAAU,MAGlBG"}